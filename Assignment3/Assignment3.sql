customers
+------------+---------------+---------------------+------------+-------------+
| customerid | name          | email               | joindate   | city        |
+------------+---------------+---------------------+------------+-------------+
|          1 | Alice Johnson | alice@example.com   | 2022-01-15 | New York    |
|          2 | Bob Smith     | bob@example.com     | 2022-03-10 | Los Angeles |
|          3 | Charlie Brown | charlie@example.com | 2023-02-05 | Chicago     |
+------------+---------------+---------------------+------------+-------------+

deliveries
+------------+---------+-----------------+--------------+
| deliveryid | orderid | deliveryperson  | deliverytime |
+------------+---------+-----------------+--------------+
|          1 |       1 | John Doe        |           30 |
|          2 |       2 | Jane Smith      |           25 |
|          3 |       3 | Carlos Gonzalez |           40 |
+------------+---------+-----------------+--------------+

dishes
+--------+------------------+--------------+-------+
| dishid | name             | restaurantid | price |
+--------+------------------+--------------+-------+
|      1 | Margherita Pizza |            1 | 12.99 |
|      2 | Pepperoni Pizza  |            1 | 14.99 |
|      3 | Sushi Platter    |            2 | 22.99 |
|      4 | Taco Combo       |            3 |  9.99 |
+--------+------------------+--------------+-------+

orders
+---------+------------+--------------+------------+-------------+
| orderid | customerid | restaurantid | orderdate  | totalamount |
+---------+------------+--------------+------------+-------------+
|       1 |          1 |            1 | 2023-10-10 |       27.98 |
|       2 |          2 |            2 | 2023-10-11 |       22.99 |
|       3 |          3 |            3 | 2023-10-12 |       19.98 |
+---------+------------+--------------+------------+-------------+

restaurants
+--------------+---------------+----------+-------------+--------+
| restaurantid | name          | cuisine  | city        | rating |
+--------------+---------------+----------+-------------+--------+
|            1 | Pizza Palace  | Italian  | New York    |   4.50 |
|            2 | Sushi Central | Japanese | Los Angeles |   4.80 |
|            3 | Taco Town     | Mexican  | Chicago     |   4.20 |
+--------------+---------------+----------+-------------+--------+

reviews
+----------+------------+---------+--------+-------------------------------------------+------------+
| reviewid | customerid | orderid | rating | reviewtext                                | reviewdate |
+----------+------------+---------+--------+-------------------------------------------+------------+
|        1 |          1 |       1 |      5 | Excellent pizza and quick delivery!       | 2023-10-11 |
|        2 |          2 |       2 |      4 | Great sushi, but delivery was a bit late. | 2023-10-12 |
|        3 |          3 |       3 |      3 | Tacos were okay, delivery took too long.  | 2023-10-13 |
+----------+------------+---------+--------+-------------------------------------------+------------+

Basic Queries
1. Retrieve the list of all dishes along with their restaurant names and prices.
select d.name as dishname, r.name as restaurantname, d.prices
    -> from dishes as d
    -> join restaurants as r on d.restaurantid = r.restaurantid;

2. Find the average rating of all restaurants in New York.
select AVG(rating) as avg_rating, city
    -> from restaurants
    -> where city = 'New York'
    -> group by city;

Intermediate Queries
3. Calculate the total revenue generated by each restaurant.
select r.name as restaurantname, SUM(o.totalamount) as totalrevenue
    -> from restaurants as r
    -> left join orders as o on r.restaurantid = o.restaurantid
    -> group by r.restaurantid;

4. List the names of customers who have ordered more than once.
select c.name as customername, COUNT(o.orderid) as noof_orders
    -> from customers as c
    -> join orders as o on c.customerid = o.customerid
    -> group by c.name
    -> having noof_orders > 1;

Advanced Queries with Window Functions
5. Use a window function to rank restaurants based on their average customer ratings.
select rank() over (order by rating DESC) as rankbyrating, name 
    -> from restaurants;

6. Calculate the cumulative total revenue for each restaurant.
select r.name as restaurantname, SUM(o.totalamount) over (partition by o.restaurantid order by o.restaurantid) as revenue
    -> from restaurants as r
    -> join orders as o on r.restaurantid = o.restaurantid;

7. Identify the top 2 most ordered dishes in each city using a window function.

8. Find the average delivery time for each delivery person and rank them.
with avg_time as(
    -> select deliveryperson, avg(deliverytime) as time
    -> from deliveries
    -> group by deliveryperson
    -> )
    -> select deliveryperson, rank() over (order by time) as avg_delivery_rank
    -> from avg_time;

Aggregations and Grouping
9. Retrieve the count of orders placed in each city.
select r.city, COUNT(o.orderid) as cityorder_count
    -> from orders as o
    -> left join restaurants as r on o.restaurantid = r.restaurantid
    -> group by r.city;

10.Calculate the average order value for each cuisine type.
select r.cuisine, AVG(o.totalamount) as avg_ordervalue
    -> from orders as o
    -> join restaurants as r on o.restaurantid = r.restaurantid
    -> group by r.cuisine;
    
Filtering
11.List all reviews with a rating below 4.
select * from reviews 
    -> where rating < 4;
    
12.Display all orders placed after October 1, 2023.
select * from orders 
    -> where orderdate > 2023-10-01;

Joins
13.Write a query to display order details along with the restaurant and customer
names.
select o.orderid, o.customerid, c.name as customername, o.restaurantid, r.name as restaurantname, o.orderdate, o.totalamount
    -> from orders as o
    -> join customers as c on o.customerid = c.customerid
    -> join restaurants as r on o.restaurantid = r.restaurantid;
    
14.Show all dishes ordered by each customer.

Subqueries
15.Find the name of the customer who gave the lowest rating.
select c.name as customername, r.rating
    -> from customers as c
    -> join reviews as r on c.customerid = r.customerid
    -> order by r.rating
    -> limit 1;

16.Retrieve the most expensive dish for each cuisine type.
select name as dish, cuisine, price as highestprice
    -> from (
    -> select d.name, r.cuisine, d.price,
    -> rank() over (partition by r.cuisine order by d.price desc) as ranking
    -> from dishes as d
    -> join restaurants as r on d.restaurantid = r.restaurantid
    -> ) as ranked
    -> where ranking = 1;

Analytical Queries
17.Identify the delivery person with the fastest average delivery time.
select deliveryperson, AVG(deliverytime) as avgdeliverytime
    -> from deliveries
    -> group by deliveryperson
    -> order by avgdeliverytime
    -> limit 1;

18.Calculate the average delivery time for all orders handled by "Carlos Gonzalez."
select deliveryperson, AVG(deliverytime) as avgdeliverytime
    -> from deliveries
    -> where deliveryperson = 'Carlos Gonzalez'
    -> group by deliveryperson;

19.Use a window function to assign a rank to each review based on its date, grouped by
customer.
select r.reviewid,r.customerid, c.name as customernam, r.rating, r.reviewdate, rank(
) over (partition by c.name order by reviewdate)
    -> from reviews as r
    -> join customers as c on r.customerid = c.customerid;

Advanced Window Functions
20.Calculate the running total of revenue for orders by each customer
select customerid, orderid, SUM(totalamount) over (partition by customerid order by orderid) as running_total
    -> from orders;

